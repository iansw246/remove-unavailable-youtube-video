import { DEFAULT_COUNTRY_CODE } from "../data/regionOptions";
import playlistsListResponse from "../testData/ownedPlaylistsListResponse";
import { PlaylistItemListResponse, PlaylistItemResource } from "../utils/requestHelpers";
import { GApiApiProvider } from "./gapiApiProvider";

const mockPlaylistListResponse = {
    "kind": "youtube#playlistListResponse",
    "etag": "RZ-Hu7jTlWOB-OOP8mDZ2f9OpLo",
    "pageInfo": {
        "totalResults": 1,
        "resultsPerPage": 50
    },
    "items": [
        {
        "kind": "youtube#playlist",
        "etag": "z-0rWewaRt_ATqhYsH5hQxmfM5c",
        "id": "PLKjbdQIJlV5kgUwFk2V6NQQtbFeaY68KV",
        "snippet": {
            "publishedAt": "2023-01-11T05:29:01Z",
            "channelId": "UCctuKDR0o4tYSE9bfAxOZFA",
            "title": "Delete Test",
            "description": "",
            "thumbnails": {
            "default": {
                "url": "https://i.ytimg.com/vi/jbZU6QyZ8Nc/default.jpg",
                "width": 120,
                "height": 90
            },
            "medium": {
                "url": "https://i.ytimg.com/vi/jbZU6QyZ8Nc/mqdefault.jpg",
                "width": 320,
                "height": 180
            },
            "high": {
                "url": "https://i.ytimg.com/vi/jbZU6QyZ8Nc/hqdefault.jpg",
                "width": 480,
                "height": 360
            },
            "standard": {
                "url": "https://i.ytimg.com/vi/jbZU6QyZ8Nc/sddefault.jpg",
                "width": 640,
                "height": 480
            },
            "maxres": {
                "url": "https://i.ytimg.com/vi/jbZU6QyZ8Nc/maxresdefault.jpg",
                "width": 1280,
                "height": 720
            }
            },
            "channelTitle": "Ian",
            "localized": {
            "title": "Delete Test",
            "description": ""
            }
        },
        "status": {
            "privacyStatus": "private"
        },
        "contentDetails": {
            "itemCount": 107
        }
        },
    ]
};

const mockPlaylistItemsListResponse = {
    status: 200,
    result: {
        "kind": "youtube#playlistItemListResponse",
        "etag": "OlXS_VhHXCUF7dva8dYTY4HwCao",
        "items": [
            {
            "kind": "youtube#playlistItem",
            "etag": "Bk82WivhrcU7VXe9qv5pvNIKm-w",
            "id": "T0xBSzV1eV9sVkhLcFdZVmVMSkVQMmVxTWpmQ2swdVlFNTRxUlhvMTAuMTNGMkFGMUE4OTk4MkNGOQ",
            "snippet": {
                "publishedAt": "2023-09-29T03:18:04Z",
                "channelId": "UCBR8-60-B28hp2BmDPdntcQ",
                "title": "Boat Buds",
                "description": "Provided to YouTube by CDBaby\n\nBoat Buds · Mark Sparling\n\nBoat Buds: A Short Hike EP\n\n℗ 2021 Mark Sparling\n\nReleased on: 2021-01-18\n\nAuto-generated by YouTube.",
                "thumbnails": {
                "default": {
                    "url": "https://i.ytimg.com/vi/Dc30Pk_Ib1w/default.jpg",
                    "width": 120,
                    "height": 90
                },
                "medium": {
                    "url": "https://i.ytimg.com/vi/Dc30Pk_Ib1w/mqdefault.jpg",
                    "width": 320,
                    "height": 180
                },
                "high": {
                    "url": "https://i.ytimg.com/vi/Dc30Pk_Ib1w/hqdefault.jpg",
                    "width": 480,
                    "height": 360
                },
                "standard": {
                    "url": "https://i.ytimg.com/vi/Dc30Pk_Ib1w/sddefault.jpg",
                    "width": 640,
                    "height": 480
                },
                "maxres": {
                    "url": "https://i.ytimg.com/vi/Dc30Pk_Ib1w/maxresdefault.jpg",
                    "width": 1280,
                    "height": 720
                }
                },
                "channelTitle": "YouTube",
                "playlistId": "OLAK5uy_lVHKpWYVeLJEP2eqMjfCk0uYE54qRXo10",
                "position": 0,
                "resourceId": {
                "kind": "youtube#video",
                "videoId": "Dc30Pk_Ib1w"
                },
                "videoOwnerChannelTitle": "Mark Sparling - Topic",
                "videoOwnerChannelId": "UCPw7S3ZvjuPnc2-KCIxZYbw"
            },
            "contentDetails": {
                "videoId": "Dc30Pk_Ib1w",
                "videoPublishedAt": "2021-01-17T10:06:03Z"
            },
            "status": {
                "privacyStatus": "public"
            }
        },]
    }
}

beforeEach(() => {
    global.gapi = {
        client: {
            // @ts-expect-error
            youtube: {
                playlists: {
                    list: jest.fn((request?) => {
                        if (request?.id === mockPlaylistListResponse.items[0].id || request?.mine) {
                            const response: any = Promise.resolve({
                                result: mockPlaylistListResponse
                            });
                            response.execute = jest.fn();
                            return response;
                        } else {
                            throw new Error("Test failed: unable to find playlist with id");
                        }
                    }),
                    delete: jest.fn(),
                    insert: jest.fn(),
                    update: jest.fn(),
                },
                playlistItems: {
                    list: jest.fn(() => Promise.resolve(mockPlaylistItemsListResponse) as unknown as gapi.client.Request<PlaylistItemListResponse>),
                    delete: jest.fn(),
                    insert: jest.fn(),
                    update: jest.fn(),
                },
            },
        },
    },
});

afterEach(() => {
    (global.gapi as any) = undefined;
});

test("Fetches playlist by id", () => {
    return expect(GApiApiProvider.fetchPlaylist(mockPlaylistListResponse.items[0].id))
        .resolves
        .toMatchObject(mockPlaylistListResponse.items);
});

test("Fetches playlists owned by user", () => {
    const mockGoogleOAuthAccessToken = "foofoo";
    return expect(GApiApiProvider.fetchOwnedPlaylists(mockGoogleOAuthAccessToken))
        .resolves
        .toMatchObject(mockPlaylistListResponse.items)
});

// Testing fetchUnavailablePlaylistItems is too difficult since it requires mocking
// gapi batch, which has lots of state
// test("Doesn't return available playlist items as unavailable", () => {
//     const mockGoogleOAuthAccessToken = "foofoo";
//     const mockPlaylistId = "12345";
//     const mockUserCountryCode = DEFAULT_COUNTRY_CODE;
//     const mockUserChannelId = "abc";
//     return expect(GApiApiProvider.fetchUnavailablePlaylistItems(mockPlaylistId, mockUserCountryCode, mockUserChannelId, mockGoogleOAuthAccessToken))
//         .resolves
//         .toHaveLength(0);
// });